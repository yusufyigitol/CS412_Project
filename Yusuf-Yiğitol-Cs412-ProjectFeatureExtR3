{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1JE_T3Hb3EOKyCrlzT8FNq0dAGcOTFWSX","timestamp":1736612744894},{"file_id":"1RPPFeX4rItInofPOhDGBHLiEp9dExnsP","timestamp":1736599165000}],"mount_file_id":"1JE_T3Hb3EOKyCrlzT8FNq0dAGcOTFWSX","authorship_tag":"ABX9TyP2a1WUNA9A3aNcrdFCw45N"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"IZjkEr54Aw43","executionInfo":{"status":"ok","timestamp":1736612805661,"user_tz":-180,"elapsed":19866,"user":{"displayName":"Yusuf Yiğitol (Student)","userId":"03344190346184437889"}}},"outputs":[],"source":["import numpy as np\n","import pandas as pd\n","import gzip\n","import json\n","import nltk\n","from nltk.corpus import stopwords\n","from pprint import pprint\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","from sklearn.model_selection import train_test_split\n","import re\n","import os"]},{"cell_type":"code","source":["# Download Turkish Stopwords\n","nltk.download('stopwords')\n","turkish_stopwords = stopwords.words('turkish')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"L7Z6iQnmAyOq","executionInfo":{"status":"ok","timestamp":1736612806896,"user_tz":-180,"elapsed":288,"user":{"displayName":"Yusuf Yiğitol (Student)","userId":"03344190346184437889"}},"outputId":"a8c9f39e-5407-46d8-e515-07373d54bd18"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Unzipping corpora/stopwords.zip.\n"]}]},{"cell_type":"code","source":["# Mount Google Drive if using Colab\n","try:\n","    from google.colab import drive\n","    drive.mount('/content/drive')\n","    base_path = \"/content/drive/MyDrive/CS 412/Project/\"\n","except ImportError:\n","    base_path = \"./\"\n","\n","# Paths to datasets\n","train_classification_path = os.path.join(base_path, \"train-classification.csv\")\n","train_data_path = os.path.join(base_path, \"training-dataset.jsonl.gz\")\n","test_classification_path = os.path.join(base_path, \"test-classification-round3.dat\")\n","test_regression_path = os.path.join(base_path, \"test-regression-round3.jsonl\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jhtNHU4LA23k","executionInfo":{"status":"ok","timestamp":1736612833672,"user_tz":-180,"elapsed":21211,"user":{"displayName":"Yusuf Yiğitol (Student)","userId":"03344190346184437889"}},"outputId":"d90da5d9-2712-4132-c68d-678acba8cc76"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["# Load Classification Dataset\n","train_classification_df = pd.read_csv(train_classification_path)\n","train_classification_df = train_classification_df.rename(columns={'Unnamed: 0': 'user_id', 'label': 'category'})\n","train_classification_df[\"category\"] = train_classification_df[\"category\"].apply(str.lower)\n","username2_category = train_classification_df.set_index(\"user_id\").to_dict()[\"category\"]\n","\n","# Stats about labels\n","print(train_classification_df.groupby(\"category\").count())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"d3k60qwgA7s1","executionInfo":{"status":"ok","timestamp":1736612834532,"user_tz":-180,"elapsed":862,"user":{"displayName":"Yusuf Yiğitol (Student)","userId":"03344190346184437889"}},"outputId":"2094ef4f-10f7-45a9-a575-7b943c204a9b"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["                      user_id\n","category                     \n","art                       191\n","entertainment             323\n","fashion                   299\n","food                      511\n","gaming                     13\n","health and lifestyle      503\n","mom and children          149\n","sports                    113\n","tech                      346\n","travel                    294\n"]}]},{"cell_type":"code","source":["# Load Training Data\n","username2posts_train = dict()\n","username2profile_train = dict()\n","username2posts_test = dict()\n","username2profile_test = dict()\n","\n","with gzip.open(train_data_path, \"rt\") as fh:\n","    for line in fh:\n","        sample = json.loads(line)\n","        profile = sample[\"profile\"]\n","        username = profile[\"username\"]\n","        if username in username2_category:\n","            username2posts_train[username] = sample[\"posts\"]\n","            username2profile_train[username] = profile\n","        else:\n","            username2posts_test[username] = sample[\"posts\"]\n","            username2profile_test[username] = profile"],"metadata":{"id":"M2unL6WCA9zi","executionInfo":{"status":"ok","timestamp":1736612848152,"user_tz":-180,"elapsed":13623,"user":{"displayName":"Yusuf Yiğitol (Student)","userId":"03344190346184437889"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["# Convert Profiles to DataFrame\n","train_profile_df = pd.DataFrame(username2profile_train).T.reset_index(drop=True)\n","test_profile_df = pd.DataFrame(username2profile_test).T.reset_index(drop=True)\n","print(\"Training profiles shape:\", train_profile_df.shape)\n","print(\"Test profiles shape:\", test_profile_df.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ikc5xaqGBAEo","executionInfo":{"status":"ok","timestamp":1736612848545,"user_tz":-180,"elapsed":396,"user":{"displayName":"Yusuf Yiğitol (Student)","userId":"03344190346184437889"}},"outputId":"f5d09324-0f00-4d14-f420-2d68eb31aa92"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Training profiles shape: (2741, 44)\n","Test profiles shape: (2674, 44)\n"]}]},{"cell_type":"code","source":["# Text Preprocessing\n","def preprocess_text(text: str):\n","    text = text.casefold()\n","    text = re.sub(r'http\\S+|www\\S+|https\\S+', '', text, flags=re.MULTILINE)\n","    text = re.sub(r'[^a-zçğıöşü0-9\\s#@]', '', text)\n","    text = re.sub(r'\\d+', '', text)\n","    text = re.sub(r'\\s+', ' ', text).strip()\n","    return text"],"metadata":{"id":"Jhtue8JlBRWY","executionInfo":{"status":"ok","timestamp":1736612848545,"user_tz":-180,"elapsed":4,"user":{"displayName":"Yusuf Yiğitol (Student)","userId":"03344190346184437889"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["# Prepare Corpus for TF-IDF\n","corpus = []\n","train_usernames = []\n","for username, posts in username2posts_train.items():\n","    train_usernames.append(username)\n","    cleaned_captions = []\n","    for post in posts:\n","        post_caption = post.get(\"caption\", \"\")\n","        if post_caption:\n","            cleaned_captions.append(preprocess_text(post_caption))\n","    corpus.append(\"\\n\".join(cleaned_captions))\n","\n","vectorizer = TfidfVectorizer(stop_words=turkish_stopwords, max_features=10000, ngram_range=(1, 2))\n","vectorizer.fit(corpus)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":167},"id":"Ir0PmEG6BXEm","executionInfo":{"status":"ok","timestamp":1736612880722,"user_tz":-180,"elapsed":32180,"user":{"displayName":"Yusuf Yiğitol (Student)","userId":"03344190346184437889"}},"outputId":"be78584b-ff31-4f7c-aa4a-81c1c0fff4f7"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["TfidfVectorizer(max_features=10000, ngram_range=(1, 2),\n","                stop_words=['acaba', 'ama', 'aslında', 'az', 'bazı', 'belki',\n","                            'biri', 'birkaç', 'birşey', 'biz', 'bu', 'çok',\n","                            'çünkü', 'da', 'daha', 'de', 'defa', 'diye', 'eğer',\n","                            'en', 'gibi', 'hem', 'hep', 'hepsi', 'her', 'hiç',\n","                            'için', 'ile', 'ise', 'kez', ...])"],"text/html":["<style>#sk-container-id-1 {\n","  /* Definition of color scheme common for light and dark mode */\n","  --sklearn-color-text: #000;\n","  --sklearn-color-text-muted: #666;\n","  --sklearn-color-line: gray;\n","  /* Definition of color scheme for unfitted estimators */\n","  --sklearn-color-unfitted-level-0: #fff5e6;\n","  --sklearn-color-unfitted-level-1: #f6e4d2;\n","  --sklearn-color-unfitted-level-2: #ffe0b3;\n","  --sklearn-color-unfitted-level-3: chocolate;\n","  /* Definition of color scheme for fitted estimators */\n","  --sklearn-color-fitted-level-0: #f0f8ff;\n","  --sklearn-color-fitted-level-1: #d4ebff;\n","  --sklearn-color-fitted-level-2: #b3dbfd;\n","  --sklearn-color-fitted-level-3: cornflowerblue;\n","\n","  /* Specific color for light theme */\n","  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n","  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-icon: #696969;\n","\n","  @media (prefers-color-scheme: dark) {\n","    /* Redefinition of color scheme for dark theme */\n","    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n","    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-icon: #878787;\n","  }\n","}\n","\n","#sk-container-id-1 {\n","  color: var(--sklearn-color-text);\n","}\n","\n","#sk-container-id-1 pre {\n","  padding: 0;\n","}\n","\n","#sk-container-id-1 input.sk-hidden--visually {\n","  border: 0;\n","  clip: rect(1px 1px 1px 1px);\n","  clip: rect(1px, 1px, 1px, 1px);\n","  height: 1px;\n","  margin: -1px;\n","  overflow: hidden;\n","  padding: 0;\n","  position: absolute;\n","  width: 1px;\n","}\n","\n","#sk-container-id-1 div.sk-dashed-wrapped {\n","  border: 1px dashed var(--sklearn-color-line);\n","  margin: 0 0.4em 0.5em 0.4em;\n","  box-sizing: border-box;\n","  padding-bottom: 0.4em;\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","#sk-container-id-1 div.sk-container {\n","  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n","     but bootstrap.min.css set `[hidden] { display: none !important; }`\n","     so we also need the `!important` here to be able to override the\n","     default hidden behavior on the sphinx rendered scikit-learn.org.\n","     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n","  display: inline-block !important;\n","  position: relative;\n","}\n","\n","#sk-container-id-1 div.sk-text-repr-fallback {\n","  display: none;\n","}\n","\n","div.sk-parallel-item,\n","div.sk-serial,\n","div.sk-item {\n","  /* draw centered vertical line to link estimators */\n","  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n","  background-size: 2px 100%;\n","  background-repeat: no-repeat;\n","  background-position: center center;\n","}\n","\n","/* Parallel-specific style estimator block */\n","\n","#sk-container-id-1 div.sk-parallel-item::after {\n","  content: \"\";\n","  width: 100%;\n","  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n","  flex-grow: 1;\n","}\n","\n","#sk-container-id-1 div.sk-parallel {\n","  display: flex;\n","  align-items: stretch;\n","  justify-content: center;\n","  background-color: var(--sklearn-color-background);\n","  position: relative;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item {\n","  display: flex;\n","  flex-direction: column;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item:first-child::after {\n","  align-self: flex-end;\n","  width: 50%;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item:last-child::after {\n","  align-self: flex-start;\n","  width: 50%;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item:only-child::after {\n","  width: 0;\n","}\n","\n","/* Serial-specific style estimator block */\n","\n","#sk-container-id-1 div.sk-serial {\n","  display: flex;\n","  flex-direction: column;\n","  align-items: center;\n","  background-color: var(--sklearn-color-background);\n","  padding-right: 1em;\n","  padding-left: 1em;\n","}\n","\n","\n","/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n","clickable and can be expanded/collapsed.\n","- Pipeline and ColumnTransformer use this feature and define the default style\n","- Estimators will overwrite some part of the style using the `sk-estimator` class\n","*/\n","\n","/* Pipeline and ColumnTransformer style (default) */\n","\n","#sk-container-id-1 div.sk-toggleable {\n","  /* Default theme specific background. It is overwritten whether we have a\n","  specific estimator or a Pipeline/ColumnTransformer */\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","/* Toggleable label */\n","#sk-container-id-1 label.sk-toggleable__label {\n","  cursor: pointer;\n","  display: flex;\n","  width: 100%;\n","  margin-bottom: 0;\n","  padding: 0.5em;\n","  box-sizing: border-box;\n","  text-align: center;\n","  align-items: start;\n","  justify-content: space-between;\n","  gap: 0.5em;\n","}\n","\n","#sk-container-id-1 label.sk-toggleable__label .caption {\n","  font-size: 0.6rem;\n","  font-weight: lighter;\n","  color: var(--sklearn-color-text-muted);\n","}\n","\n","#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n","  /* Arrow on the left of the label */\n","  content: \"▸\";\n","  float: left;\n","  margin-right: 0.25em;\n","  color: var(--sklearn-color-icon);\n","}\n","\n","#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n","  color: var(--sklearn-color-text);\n","}\n","\n","/* Toggleable content - dropdown */\n","\n","#sk-container-id-1 div.sk-toggleable__content {\n","  max-height: 0;\n","  max-width: 0;\n","  overflow: hidden;\n","  text-align: left;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-toggleable__content.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-toggleable__content pre {\n","  margin: 0.2em;\n","  border-radius: 0.25em;\n","  color: var(--sklearn-color-text);\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n","  /* Expand drop-down */\n","  max-height: 200px;\n","  max-width: 100%;\n","  overflow: auto;\n","}\n","\n","#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n","  content: \"▾\";\n","}\n","\n","/* Pipeline/ColumnTransformer-specific style */\n","\n","#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator-specific style */\n","\n","/* Colorize estimator box */\n","#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n","#sk-container-id-1 div.sk-label label {\n","  /* The background is the default theme color */\n","  color: var(--sklearn-color-text-on-default-background);\n","}\n","\n","/* On hover, darken the color of the background */\n","#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","/* Label box, darken color on hover, fitted */\n","#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator label */\n","\n","#sk-container-id-1 div.sk-label label {\n","  font-family: monospace;\n","  font-weight: bold;\n","  display: inline-block;\n","  line-height: 1.2em;\n","}\n","\n","#sk-container-id-1 div.sk-label-container {\n","  text-align: center;\n","}\n","\n","/* Estimator-specific */\n","#sk-container-id-1 div.sk-estimator {\n","  font-family: monospace;\n","  border: 1px dotted var(--sklearn-color-border-box);\n","  border-radius: 0.25em;\n","  box-sizing: border-box;\n","  margin-bottom: 0.5em;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-estimator.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","/* on hover */\n","#sk-container-id-1 div.sk-estimator:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-estimator.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Specification for estimator info (e.g. \"i\" and \"?\") */\n","\n","/* Common style for \"i\" and \"?\" */\n","\n",".sk-estimator-doc-link,\n","a:link.sk-estimator-doc-link,\n","a:visited.sk-estimator-doc-link {\n","  float: right;\n","  font-size: smaller;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1em;\n","  height: 1em;\n","  width: 1em;\n","  text-decoration: none !important;\n","  margin-left: 0.5em;\n","  text-align: center;\n","  /* unfitted */\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-unfitted-level-1);\n","}\n","\n",".sk-estimator-doc-link.fitted,\n","a:link.sk-estimator-doc-link.fitted,\n","a:visited.sk-estimator-doc-link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","/* Span, style for the box shown on hovering the info icon */\n",".sk-estimator-doc-link span {\n","  display: none;\n","  z-index: 9999;\n","  position: relative;\n","  font-weight: normal;\n","  right: .2ex;\n","  padding: .5ex;\n","  margin: .5ex;\n","  width: min-content;\n","  min-width: 20ex;\n","  max-width: 50ex;\n","  color: var(--sklearn-color-text);\n","  box-shadow: 2pt 2pt 4pt #999;\n","  /* unfitted */\n","  background: var(--sklearn-color-unfitted-level-0);\n","  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n","}\n","\n",".sk-estimator-doc-link.fitted span {\n","  /* fitted */\n","  background: var(--sklearn-color-fitted-level-0);\n","  border: var(--sklearn-color-fitted-level-3);\n","}\n","\n",".sk-estimator-doc-link:hover span {\n","  display: block;\n","}\n","\n","/* \"?\"-specific style due to the `<a>` HTML tag */\n","\n","#sk-container-id-1 a.estimator_doc_link {\n","  float: right;\n","  font-size: 1rem;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1rem;\n","  height: 1rem;\n","  width: 1rem;\n","  text-decoration: none;\n","  /* unfitted */\n","  color: var(--sklearn-color-unfitted-level-1);\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","}\n","\n","#sk-container-id-1 a.estimator_doc_link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","#sk-container-id-1 a.estimator_doc_link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","}\n","</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>TfidfVectorizer(max_features=10000, ngram_range=(1, 2),\n","                stop_words=[&#x27;acaba&#x27;, &#x27;ama&#x27;, &#x27;aslında&#x27;, &#x27;az&#x27;, &#x27;bazı&#x27;, &#x27;belki&#x27;,\n","                            &#x27;biri&#x27;, &#x27;birkaç&#x27;, &#x27;birşey&#x27;, &#x27;biz&#x27;, &#x27;bu&#x27;, &#x27;çok&#x27;,\n","                            &#x27;çünkü&#x27;, &#x27;da&#x27;, &#x27;daha&#x27;, &#x27;de&#x27;, &#x27;defa&#x27;, &#x27;diye&#x27;, &#x27;eğer&#x27;,\n","                            &#x27;en&#x27;, &#x27;gibi&#x27;, &#x27;hem&#x27;, &#x27;hep&#x27;, &#x27;hepsi&#x27;, &#x27;her&#x27;, &#x27;hiç&#x27;,\n","                            &#x27;için&#x27;, &#x27;ile&#x27;, &#x27;ise&#x27;, &#x27;kez&#x27;, ...])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>TfidfVectorizer</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.html\">?<span>Documentation for TfidfVectorizer</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>TfidfVectorizer(max_features=10000, ngram_range=(1, 2),\n","                stop_words=[&#x27;acaba&#x27;, &#x27;ama&#x27;, &#x27;aslında&#x27;, &#x27;az&#x27;, &#x27;bazı&#x27;, &#x27;belki&#x27;,\n","                            &#x27;biri&#x27;, &#x27;birkaç&#x27;, &#x27;birşey&#x27;, &#x27;biz&#x27;, &#x27;bu&#x27;, &#x27;çok&#x27;,\n","                            &#x27;çünkü&#x27;, &#x27;da&#x27;, &#x27;daha&#x27;, &#x27;de&#x27;, &#x27;defa&#x27;, &#x27;diye&#x27;, &#x27;eğer&#x27;,\n","                            &#x27;en&#x27;, &#x27;gibi&#x27;, &#x27;hem&#x27;, &#x27;hep&#x27;, &#x27;hepsi&#x27;, &#x27;her&#x27;, &#x27;hiç&#x27;,\n","                            &#x27;için&#x27;, &#x27;ile&#x27;, &#x27;ise&#x27;, &#x27;kez&#x27;, ...])</pre></div> </div></div></div></div>"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["# Transform Data\n","x_post_train = vectorizer.transform(corpus)\n","y_train = [username2_category[uname] for uname in train_usernames]"],"metadata":{"id":"4nVozfC5BajR","executionInfo":{"status":"ok","timestamp":1736612886316,"user_tz":-180,"elapsed":5597,"user":{"displayName":"Yusuf Yiğitol (Student)","userId":"03344190346184437889"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["# Prepare Test Data\n","test_usernames = []\n","test_corpus = []\n","for username, posts in username2posts_test.items():\n","    test_usernames.append(username)\n","    cleaned_captions = []\n","    for post in posts:\n","        post_caption = post.get(\"caption\", \"\")\n","        if post_caption:\n","            cleaned_captions.append(preprocess_text(post_caption))\n","    test_corpus.append(\"\\n\".join(cleaned_captions))\n","\n","x_post_test = vectorizer.transform(test_corpus)\n","\n","# Ensure no \"NA\" in y_train\n","assert y_train.count(\"NA\") == 0"],"metadata":{"id":"0nezl73EBdPh","executionInfo":{"status":"ok","timestamp":1736612898642,"user_tz":-180,"elapsed":12328,"user":{"displayName":"Yusuf Yiğitol (Student)","userId":"03344190346184437889"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["from sklearn.linear_model import LogisticRegression\n","from sklearn.model_selection import cross_val_score\n","from sklearn.model_selection import GridSearchCV\n","\n","\n","# Train Logistic Regression Model with Cross-Validation\n","model = LogisticRegression(max_iter=1000, class_weight=\"balanced\")\n","scores = cross_val_score(model, x_post_train, y_train, cv=5, scoring='accuracy')\n","\n","# Print Cross-Validation Results\n","print(\"Cross-Validation Accuracy Scores:\", scores)\n","print(\"Mean Accuracy:\", scores.mean())\n","\n","params = {'C': [0.01, 0.1, 1, 10, 100]}\n","grid = GridSearchCV(LogisticRegression(max_iter=1000, class_weight=\"balanced\"), param_grid=params, cv=5)\n","grid.fit(x_post_train, y_train)\n","\n","# Use the best model from GridSearch\n","model = grid.best_estimator_\n","print(\"Best Parameters:\", grid.best_params_)\n","\n","# Fit the model on the full training data\n","model.fit(x_post_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":134},"id":"lAIxjuRqBgpb","executionInfo":{"status":"ok","timestamp":1736613025759,"user_tz":-180,"elapsed":127121,"user":{"displayName":"Yusuf Yiğitol (Student)","userId":"03344190346184437889"}},"outputId":"bf06b3e6-0b85-4290-a0f8-736084dbb5ad"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Cross-Validation Accuracy Scores: [0.66302368 0.64416058 0.66605839 0.6459854  0.65145985]\n","Mean Accuracy: 0.654137582598753\n","Best Parameters: {'C': 10}\n"]},{"output_type":"execute_result","data":{"text/plain":["LogisticRegression(C=10, class_weight='balanced', max_iter=1000)"],"text/html":["<style>#sk-container-id-2 {\n","  /* Definition of color scheme common for light and dark mode */\n","  --sklearn-color-text: #000;\n","  --sklearn-color-text-muted: #666;\n","  --sklearn-color-line: gray;\n","  /* Definition of color scheme for unfitted estimators */\n","  --sklearn-color-unfitted-level-0: #fff5e6;\n","  --sklearn-color-unfitted-level-1: #f6e4d2;\n","  --sklearn-color-unfitted-level-2: #ffe0b3;\n","  --sklearn-color-unfitted-level-3: chocolate;\n","  /* Definition of color scheme for fitted estimators */\n","  --sklearn-color-fitted-level-0: #f0f8ff;\n","  --sklearn-color-fitted-level-1: #d4ebff;\n","  --sklearn-color-fitted-level-2: #b3dbfd;\n","  --sklearn-color-fitted-level-3: cornflowerblue;\n","\n","  /* Specific color for light theme */\n","  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n","  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-icon: #696969;\n","\n","  @media (prefers-color-scheme: dark) {\n","    /* Redefinition of color scheme for dark theme */\n","    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n","    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-icon: #878787;\n","  }\n","}\n","\n","#sk-container-id-2 {\n","  color: var(--sklearn-color-text);\n","}\n","\n","#sk-container-id-2 pre {\n","  padding: 0;\n","}\n","\n","#sk-container-id-2 input.sk-hidden--visually {\n","  border: 0;\n","  clip: rect(1px 1px 1px 1px);\n","  clip: rect(1px, 1px, 1px, 1px);\n","  height: 1px;\n","  margin: -1px;\n","  overflow: hidden;\n","  padding: 0;\n","  position: absolute;\n","  width: 1px;\n","}\n","\n","#sk-container-id-2 div.sk-dashed-wrapped {\n","  border: 1px dashed var(--sklearn-color-line);\n","  margin: 0 0.4em 0.5em 0.4em;\n","  box-sizing: border-box;\n","  padding-bottom: 0.4em;\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","#sk-container-id-2 div.sk-container {\n","  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n","     but bootstrap.min.css set `[hidden] { display: none !important; }`\n","     so we also need the `!important` here to be able to override the\n","     default hidden behavior on the sphinx rendered scikit-learn.org.\n","     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n","  display: inline-block !important;\n","  position: relative;\n","}\n","\n","#sk-container-id-2 div.sk-text-repr-fallback {\n","  display: none;\n","}\n","\n","div.sk-parallel-item,\n","div.sk-serial,\n","div.sk-item {\n","  /* draw centered vertical line to link estimators */\n","  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n","  background-size: 2px 100%;\n","  background-repeat: no-repeat;\n","  background-position: center center;\n","}\n","\n","/* Parallel-specific style estimator block */\n","\n","#sk-container-id-2 div.sk-parallel-item::after {\n","  content: \"\";\n","  width: 100%;\n","  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n","  flex-grow: 1;\n","}\n","\n","#sk-container-id-2 div.sk-parallel {\n","  display: flex;\n","  align-items: stretch;\n","  justify-content: center;\n","  background-color: var(--sklearn-color-background);\n","  position: relative;\n","}\n","\n","#sk-container-id-2 div.sk-parallel-item {\n","  display: flex;\n","  flex-direction: column;\n","}\n","\n","#sk-container-id-2 div.sk-parallel-item:first-child::after {\n","  align-self: flex-end;\n","  width: 50%;\n","}\n","\n","#sk-container-id-2 div.sk-parallel-item:last-child::after {\n","  align-self: flex-start;\n","  width: 50%;\n","}\n","\n","#sk-container-id-2 div.sk-parallel-item:only-child::after {\n","  width: 0;\n","}\n","\n","/* Serial-specific style estimator block */\n","\n","#sk-container-id-2 div.sk-serial {\n","  display: flex;\n","  flex-direction: column;\n","  align-items: center;\n","  background-color: var(--sklearn-color-background);\n","  padding-right: 1em;\n","  padding-left: 1em;\n","}\n","\n","\n","/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n","clickable and can be expanded/collapsed.\n","- Pipeline and ColumnTransformer use this feature and define the default style\n","- Estimators will overwrite some part of the style using the `sk-estimator` class\n","*/\n","\n","/* Pipeline and ColumnTransformer style (default) */\n","\n","#sk-container-id-2 div.sk-toggleable {\n","  /* Default theme specific background. It is overwritten whether we have a\n","  specific estimator or a Pipeline/ColumnTransformer */\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","/* Toggleable label */\n","#sk-container-id-2 label.sk-toggleable__label {\n","  cursor: pointer;\n","  display: flex;\n","  width: 100%;\n","  margin-bottom: 0;\n","  padding: 0.5em;\n","  box-sizing: border-box;\n","  text-align: center;\n","  align-items: start;\n","  justify-content: space-between;\n","  gap: 0.5em;\n","}\n","\n","#sk-container-id-2 label.sk-toggleable__label .caption {\n","  font-size: 0.6rem;\n","  font-weight: lighter;\n","  color: var(--sklearn-color-text-muted);\n","}\n","\n","#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n","  /* Arrow on the left of the label */\n","  content: \"▸\";\n","  float: left;\n","  margin-right: 0.25em;\n","  color: var(--sklearn-color-icon);\n","}\n","\n","#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n","  color: var(--sklearn-color-text);\n","}\n","\n","/* Toggleable content - dropdown */\n","\n","#sk-container-id-2 div.sk-toggleable__content {\n","  max-height: 0;\n","  max-width: 0;\n","  overflow: hidden;\n","  text-align: left;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-2 div.sk-toggleable__content.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-2 div.sk-toggleable__content pre {\n","  margin: 0.2em;\n","  border-radius: 0.25em;\n","  color: var(--sklearn-color-text);\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n","  /* Expand drop-down */\n","  max-height: 200px;\n","  max-width: 100%;\n","  overflow: auto;\n","}\n","\n","#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n","  content: \"▾\";\n","}\n","\n","/* Pipeline/ColumnTransformer-specific style */\n","\n","#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator-specific style */\n","\n","/* Colorize estimator box */\n","#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n","#sk-container-id-2 div.sk-label label {\n","  /* The background is the default theme color */\n","  color: var(--sklearn-color-text-on-default-background);\n","}\n","\n","/* On hover, darken the color of the background */\n","#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","/* Label box, darken color on hover, fitted */\n","#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator label */\n","\n","#sk-container-id-2 div.sk-label label {\n","  font-family: monospace;\n","  font-weight: bold;\n","  display: inline-block;\n","  line-height: 1.2em;\n","}\n","\n","#sk-container-id-2 div.sk-label-container {\n","  text-align: center;\n","}\n","\n","/* Estimator-specific */\n","#sk-container-id-2 div.sk-estimator {\n","  font-family: monospace;\n","  border: 1px dotted var(--sklearn-color-border-box);\n","  border-radius: 0.25em;\n","  box-sizing: border-box;\n","  margin-bottom: 0.5em;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-2 div.sk-estimator.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","/* on hover */\n","#sk-container-id-2 div.sk-estimator:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-2 div.sk-estimator.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Specification for estimator info (e.g. \"i\" and \"?\") */\n","\n","/* Common style for \"i\" and \"?\" */\n","\n",".sk-estimator-doc-link,\n","a:link.sk-estimator-doc-link,\n","a:visited.sk-estimator-doc-link {\n","  float: right;\n","  font-size: smaller;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1em;\n","  height: 1em;\n","  width: 1em;\n","  text-decoration: none !important;\n","  margin-left: 0.5em;\n","  text-align: center;\n","  /* unfitted */\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-unfitted-level-1);\n","}\n","\n",".sk-estimator-doc-link.fitted,\n","a:link.sk-estimator-doc-link.fitted,\n","a:visited.sk-estimator-doc-link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","/* Span, style for the box shown on hovering the info icon */\n",".sk-estimator-doc-link span {\n","  display: none;\n","  z-index: 9999;\n","  position: relative;\n","  font-weight: normal;\n","  right: .2ex;\n","  padding: .5ex;\n","  margin: .5ex;\n","  width: min-content;\n","  min-width: 20ex;\n","  max-width: 50ex;\n","  color: var(--sklearn-color-text);\n","  box-shadow: 2pt 2pt 4pt #999;\n","  /* unfitted */\n","  background: var(--sklearn-color-unfitted-level-0);\n","  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n","}\n","\n",".sk-estimator-doc-link.fitted span {\n","  /* fitted */\n","  background: var(--sklearn-color-fitted-level-0);\n","  border: var(--sklearn-color-fitted-level-3);\n","}\n","\n",".sk-estimator-doc-link:hover span {\n","  display: block;\n","}\n","\n","/* \"?\"-specific style due to the `<a>` HTML tag */\n","\n","#sk-container-id-2 a.estimator_doc_link {\n","  float: right;\n","  font-size: 1rem;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1rem;\n","  height: 1rem;\n","  width: 1rem;\n","  text-decoration: none;\n","  /* unfitted */\n","  color: var(--sklearn-color-unfitted-level-1);\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","}\n","\n","#sk-container-id-2 a.estimator_doc_link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","#sk-container-id-2 a.estimator_doc_link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","}\n","</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(C=10, class_weight=&#x27;balanced&#x27;, max_iter=1000)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>LogisticRegression</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.linear_model.LogisticRegression.html\">?<span>Documentation for LogisticRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>LogisticRegression(C=10, class_weight=&#x27;balanced&#x27;, max_iter=1000)</pre></div> </div></div></div></div>"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["# Predict Test Data\n","x_test_usernames = []\n","x_test_vectors = []\n","\n","with open(test_classification_path, \"r\") as fh:\n","    for line in fh:\n","        username = line.strip()\n","        if username in test_usernames:\n","            x_test_vectors.append(x_post_test[test_usernames.index(username)].toarray()[0])\n","            x_test_usernames.append(username)\n","\n","df_test = pd.DataFrame(np.array(x_test_vectors), columns=vectorizer.get_feature_names_out())"],"metadata":{"id":"0vqZH_CEBl6J","executionInfo":{"status":"ok","timestamp":1736613035073,"user_tz":-180,"elapsed":234,"user":{"displayName":"Yusuf Yiğitol (Student)","userId":"03344190346184437889"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["predictions = model.predict(x_test_vectors)\n","print(f\"Predictions type: {type(predictions[0])}, Example: {predictions[:5]}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gwVqd2D1JPjj","executionInfo":{"status":"ok","timestamp":1736613037832,"user_tz":-180,"elapsed":251,"user":{"displayName":"Yusuf Yiğitol (Student)","userId":"03344190346184437889"}},"outputId":"6f4b600b-5d01-4f0e-c42b-2f5a0fa9db50"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["Predictions type: <class 'numpy.str_'>, Example: ['food' 'tech' 'tech' 'health and lifestyle' 'sports']\n"]}]},{"cell_type":"code","source":["output_classification = {uname: predictions[i] for i, uname in enumerate(x_test_usernames)}\n","\n","output_classification_path = os.path.join(base_path, \"prediction-classification-round3.json\")\n","with open(output_classification_path, \"w\") as outfile:\n","    json.dump(output_classification, outfile)\n","\n","print(\"Classification predictions saved.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Xm2Y5hsSB2K9","executionInfo":{"status":"ok","timestamp":1736613040258,"user_tz":-180,"elapsed":276,"user":{"displayName":"Yusuf Yiğitol (Student)","userId":"03344190346184437889"}},"outputId":"054a111d-0626-4329-d31c-c00e97f6099c"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["Classification predictions saved.\n"]}]},{"cell_type":"code","source":["from sklearn.ensemble import GradientBoostingRegressor\n","from sklearn.model_selection import train_test_split\n","import numpy as np\n","import json\n","import os\n","\n","# Prepare Data for Regression\n","like_counts = []\n","train_regression_features = []\n","\n","for username, posts in username2posts_train.items():\n","    if posts:\n","        avg_like = sum(post.get(\"like_count\", 0) or 0 for post in posts) / len(posts)\n","        total_likes = sum(post.get(\"like_count\", 0) or 0 for post in posts)\n","        avg_caption_length = np.mean([len(post[\"caption\"]) if post.get(\"caption\") else 0 for post in posts])\n","    else:\n","        avg_like, total_likes, avg_caption_length = 0, 0, 0\n","\n","    tfidf_vector = x_post_train[train_usernames.index(username)].toarray()[0]\n","    combined_features = np.concatenate(([avg_like, total_likes, avg_caption_length], tfidf_vector))\n","    train_regression_features.append(combined_features)\n","    like_counts.append(avg_like)\n","\n","train_regression_features = np.array(train_regression_features)\n","\n","# Train-Test Split for Regression\n","x_reg_train, x_reg_val, y_reg_train, y_reg_val = train_test_split(\n","    train_regression_features, like_counts, test_size=0.2, random_state=42\n",")\n","\n","from sklearn.ensemble import GradientBoostingRegressor\n","from sklearn.model_selection import RandomizedSearchCV\n","\n","param_distributions = {\n","    \"n_estimators\": [50, 100, 200],\n","    \"max_depth\": [3, 5],\n","    \"learning_rate\": [0.01, 0.1],\n","}\n","\n","# RandomizedSearchCV\n","random_search = RandomizedSearchCV(\n","    GradientBoostingRegressor(random_state=42),\n","    param_distributions=param_distributions,\n","    n_iter=8,\n","    cv=5,\n","    scoring=\"r2\",\n","    verbose=2,\n","    n_jobs=-1,\n",")\n","\n","random_search.fit(x_reg_train, y_reg_train)\n","\n","print(\"Best Parameters:\", random_search.best_params_)\n","print(\"Best Score:\", random_search.best_score_)"],"metadata":{"id":"MhbyTWpfo4iJ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1736618812372,"user_tz":-180,"elapsed":5318646,"user":{"displayName":"Yusuf Yiğitol (Student)","userId":"03344190346184437889"}},"outputId":"7f10b01a-6bd6-4ead-9942-4feef31471fc"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 5 folds for each of 8 candidates, totalling 40 fits\n","Best Parameters: {'n_estimators': 200, 'max_depth': 3, 'learning_rate': 0.1}\n","Best Score: 0.9893949680767979\n"]}]},{"cell_type":"code","source":["best_regressor = random_search.best_estimator_\n","\n","# Process Test Regression Data\n","output_regression = []\n","output_regression_path = os.path.join(base_path, \"prediction-regression-round3.json\")\n","\n","with open(test_regression_path, \"r\") as fh:\n","    for line in fh:\n","        try:\n","            sample = json.loads(line.strip())\n","\n","            if \"username\" in sample and sample[\"username\"] in test_usernames:\n","                username = sample[\"username\"]\n","\n","                # Compute features for the username\n","                if username in test_usernames:\n","                    try:\n","                        feature_vector = x_post_test[test_usernames.index(username)].toarray()[0]\n","\n","                        # Add additional features for prediction\n","                        avg_like = sum(post.get(\"like_count\", 0) or 0 for post in username2posts_test[username]) / len(\n","                            username2posts_test[username]\n","                        ) if username2posts_test[username] else 0\n","                        total_likes = sum(post.get(\"like_count\", 0) or 0 for post in username2posts_test[username])\n","                        avg_caption_length = np.mean(\n","                            [len(post[\"caption\"]) if post.get(\"caption\") else 0 for post in username2posts_test[username]]\n","                        ) if username2posts_test[username] else 0\n","\n","                        # Combine features for prediction\n","                        combined_features = np.concatenate(([avg_like, total_likes, avg_caption_length], feature_vector))\n","\n","                        # Predict like count\n","                        predicted_like = best_regressor.predict([combined_features])[0]\n","                        sample[\"like_count\"] = max(0, int(predicted_like))\n","                    except Exception as e:\n","                        print(f\"Prediction failed for username {username}: {e}\")\n","                        sample[\"like_count\"] = 0\n","                else:\n","                    sample[\"like_count\"] = 0  # Default if username not found\n","            else:\n","                sample[\"like_count\"] = 0  # Default for missing usernames\n","\n","            output_regression.append(sample)\n","        except Exception as e:\n","            print(f\"Error processing line: {line.strip()}, Error: {e}\")\n","\n","# Simplify Regression Output\n","simplified_regression_output = {sample[\"id\"]: sample[\"like_count\"] for sample in output_regression if \"id\" in sample}\n","\n","# Save Simplified Regression Predictions\n","with open(output_regression_path, \"w\") as outfile:\n","    json.dump(simplified_regression_output, outfile)\n","\n","print(f\"Regression predictions saved to {output_regression_path}.\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hsrRtAOgCYP7","executionInfo":{"status":"ok","timestamp":1736619243739,"user_tz":-180,"elapsed":4087,"user":{"displayName":"Yusuf Yiğitol (Student)","userId":"03344190346184437889"}},"outputId":"16a1c1f8-09c2-4182-d940-fddca2d9a8a5"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["Regression predictions saved to /content/drive/MyDrive/CS 412/Project/prediction-regression-round3.json.\n"]}]}]}